--EuSFML 2.5.1
--Written by Andy P.
--System routines (for csfml-system-2.dll)
--Clock,Time,Mutex,Sleep,Thread
--Vector2 and Vector3 structs are declared as separate
--For Example: sfVector2f would be C_FLOAT,C_FLOAT for x and y
--Copyright (c) 2022

include std/machine.e
include std/dll.e
include std/os.e

include flags.e

--load the DLL

atom sys = 0

ifdef WINDOWS then
	sys = open_dll("csfml-system-2.dll")
	elsifdef LINUX or FREEBSD then
	sys = open_dll("csfml-system-2.dll")
	elsif sys = -1 then
		puts(1,"Failed to open csfml-system-2.dll!\n")
		abort(1)
end ifdef

--Clock Functions

--Create a clock
public constant xsfClock_create = define_c_func(sys,"+sfClock_create",{},C_POINTER)

public function sfClock_create()

 return c_func(xsfClock_create,{})
	
end function

--Copy a clock
public constant xsfClock_copy = define_c_func(sys,"+sfClock_copy",{C_POINTER},C_POINTER)

public function sfClock_copy(atom clock)

 return c_func(xsfClock_copy,{clock})
	
end function

--Destroy a clock
public constant xsfClock_destroy = define_c_proc(sys,"+sfClock_destroy",{C_POINTER})

public procedure sfClock_destroy(atom clock)

 c_proc(xsfClock_destroy,{clock})
	
end procedure

--Get elapsed time for clock since sfClock_restart had been called
public constant xsfClock_getElapsedTime = define_c_func(sys,"+sfClock_getElapsedTime",{C_POINTER},C_POINTER)

public function sfClock_getElapsedTime(atom clock)

 return c_func(xsfClock_getElapsedTime,{clock})
	
end function

--Restart a clock
public constant xsfClock_restart = define_c_func(sys,"+sfClock_restart",{C_POINTER},C_POINTER)

public function sfClock_restart(atom clock)

 return c_func(xsfClock_restart,{clock})
	
end function

--Time Functions
--Note time has struct that contains sfInt64 microseconds
--This will be referred to as C_LONG

public constant xsfTime_asSeconds = define_c_func(sys,"+sfTime_asSeconds",{C_LONG},C_FLOAT)

public function sfTime_asSeconds(atom xtime)

 return c_func(xsfTime_asSeconds,{xtime})
	
end function

public constant xsfTime_asMilliseconds = define_c_func(sys,"+sfTime_asMilliseconds",{C_LONG},C_INT)

public function sfTime_asMilliseconds(atom xtime)

 return c_func(xsfTime_asMilliseconds,{xtime})
	
end function

public constant xsfTime_asMicroseconds = define_c_func(sys,"+sfTime_asMicroseconds",{C_LONG},C_LONG)

public function sfTime_asMicroseconds(atom xtime)

 return c_func(xsfTime_asMicroseconds,{xtime})
	
end function

public constant xsfSeconds = define_c_func(sys,"+sfSeconds",{C_FLOAT},C_LONG)

public function sfSeconds(atom amount)

 return c_func(xsfSeconds,{amount})
	
end function

public constant xsfMilliseconds = define_c_func(sys,"+sfMilliseconds",{C_INT},C_LONG)

public function sfMilliseconds(atom amount)

 return c_func(xsfMilliseconds,{amount})
	
end function

public constant xsfMicroseconds = define_c_func(sys,"+sfMicroseconds",{C_LONG},C_LONG)

public function sfMicroseconds(atom amount)

 return c_func(xsfMicroseconds,{amount})
	
end function

--Sleep Function

public constant xsfSleep = define_c_proc(sys,"+sfSleep",{C_LONG})

public procedure sfSleep(atom duration)

 c_proc(xsfSleep,{duration})
	
end procedure

--Thread Functions

public constant xsfThread_create = define_c_func(sys,"+sfThread_create",{C_POINTER,C_POINTER},C_POINTER)

public function sfThread_create(atom v,atom d)

 return c_func(xsfThread_create,{v,d})
	
end function

public constant xsfThread_destroy = define_c_proc(sys,"+sfThread_destroy",{C_POINTER})

public procedure sfThread_destroy(atom thread)

 c_proc(xsfThread_destroy,{thread})
	
end procedure

public constant xsfThread_launch = define_c_proc(sys,"+sfThread_launch",{C_POINTER})

public procedure sfThread_launch(atom thread)

 c_proc(xsfThread_launch,{thread})
	
end procedure

public constant xsfThread_wait = define_c_proc(sys,"+sfThread_wait",{C_POINTER})

public procedure sfThread_wait(atom thread)

 c_proc(xsfThread_wait,{thread})
	
end procedure

public constant xsfThread_terminate = define_c_proc(sys,"+sfThread_terminate",{C_POINTER})

public procedure sfThread_terminate(atom thread)

 c_proc(xsfThread_terminate,{thread})
	
end procedure

--Mutex Functions

public constant xsfMutex_create = define_c_func(sys,"+sfMutex_create",{},C_POINTER)

public function sfMutex_create()

 return c_func(xsfMutex_create,{})
	
end function

public constant xsfMutex_destroy = define_c_proc(sys,"+sfMutex_destroy",{C_POINTER})

public procedure sfMutex_destroy(atom mutex)

 c_proc(xsfMutex_destroy,{mutex})
	
end procedure

public constant xsfMutex_lock = define_c_proc(sys,"+sfMutex_lock",{C_POINTER})

public procedure sfMutex_lock(atom mutex)

 c_proc(xsfMutex_lock,{mutex})
	
end procedure

public constant xsfMutex_unlock = define_c_proc(sys,"+sfMutex_unlock",{C_POINTER})

public procedure sfMutex_unlock(atom mutex)

 c_proc(xsfMutex_unlock,{mutex})
	
end procedure
­7.20