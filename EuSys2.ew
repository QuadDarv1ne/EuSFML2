without warning
without type_check

include std/dll.e
include std/machine.e

include sfFlags.e

atom sys = open_dll("csfml-system-2.dll")

if sys = -1 then
	puts(1,"Could not load csfml-system-2.dll!\n")
	abort(0)
end if

--Clock functions

public constant xsfClock_create = define_c_func(sys,"sfClock_create",{},C_POINTER),
				xsfClock_copy = define_c_func(sys,"sfClock_copy",{C_POINTER},C_POINTER),
				xsfClock_destroy = define_c_proc(sys,"sfClock_destroy",{C_POINTER}),
				xsfClock_getElapsedTime = define_c_func(sys,"sfClock_getElapsedTime",{C_POINTER},C_POINTER),
				xsfClock_restart = define_c_func(sys,"sfClock_restart",{C_POINTER},C_POINTER)
				
public function sfClock_create()

 return c_func(xsfClock_create,{})
	
end function

public function sfClock_copy(atom clock)

 return c_func(xsfClock_copy,{clock})
	
end function

public procedure sfClock_destroy(atom clock)

 c_proc(xsfClock_destroy,{clock})
	
end procedure

public function sfClock_getElapsedTime(atom clock)

 return c_func(xsfClock_getElapsedTime,{clock})
	
end function

public function sfClock_restart(atom clock)

 return c_func(xsfClock_restart,{clock})
	
end function

--Time Functions

public constant xsfTime_asSeconds = define_c_func(sys,"sfTime_asSeconds",{C_POINTER},C_FLOAT),
				xsfTime_asMilliseconds = define_c_func(sys,"sfTime_asMilliseconds",{C_POINTER},C_POINTER),
				xsfTime_asMicroseconds = define_c_func(sys,"sfTime_asMircoseconds",{C_POINTER},C_POINTER),
				xsfSeconds = define_c_func(sys,"sfTime_sfSeconds",{C_FLOAT},C_POINTER),
				xsfMilliseconds = define_c_func(sys,"sfTime_Milliseconds",{C_POINTER},C_POINTER),
				xsfMicroseconds = define_c_func(sys,"sfTime_Microseconds",{C_POINTER},C_POINTER)
				
public function sfTime_asSeconds(atom xtime)

 return c_func(xsfTime_asSeconds,{xtime})
	
end function

public function sfTime_asMilliseconds(atom xtime)

 return c_func(xsfTime_asMilliseconds,{xtime})
	
end function

public function sfTime_asMicroseconds(atom xtime)

 return c_func(xsfTime_asMicroseconds,{xtime})
	
end function

public function sfSeconds(atom amount)

 return c_func(xsfSeconds,{amount})
	
end function

public function sfMilliseconds(atom amount)

 return c_func(xsfMilliseconds,{amount})
	
end function

public function sfMicroseconds(atom amount)

 return c_func(xsfMicroseconds,{amount})
	
end function

--Mutex functions

public constant xsfMutex_create = define_c_func(sys,"sfMutex_create",{},C_POINTER),
				xsfMutex_destroy = define_c_proc(sys,"sfMutex_destroy",{C_POINTER}),
				xsfMutex_lock = define_c_proc(sys,"sfMutex_lock",{C_POINTER}),
				xsfMutex_unlock = define_c_proc(sys,"sfMutex_unlock",{C_POINTER})
				
public function sfMutex_create()

 return c_func(xsfMutex_create,{})
	
end function

public procedure sfMutex_destroy(atom mutex)

 c_proc(xsfMutex_destroy,{mutex})
	
end procedure

public procedure sfMutex_lock(atom mutex)

 c_proc(xsfMutex_lock,{mutex})
	
end procedure

public procedure sfMutex_unlock(atom mutex)

 c_proc(xsfMutex_unlock,{mutex})
	
end procedure

--Thread functions

public constant xsfThread_create = define_c_func(sys,"sfThread_create",{C_POINTER,C_POINTER,C_POINTER},C_POINTER),
				xsfThread_destroy = define_c_proc(sys,"sfThread_destroy",{C_POINTER}),
				xsfThread_launch = define_c_proc(sys,"sfThread_launch",{C_POINTER}),
				xsfThread_wait = define_c_proc(sys,"sfThread_wait",{C_POINTER}),
				xsfThread_terminate = define_c_proc(sys,"sfThread_terminate",{C_POINTER})
				
public function sfThread_create(object x,object func,object data)

 return c_func(xsfThread_create,{x,func,data})
	
end function

public procedure sfThread_destroy(atom thread)

 c_proc(xsfThread_destroy,{thread})
	
end procedure

public procedure sfThread_launch(atom thread)

 c_proc(xsfThread_launch,{thread})
	
end procedure

public procedure sfThread_wait(atom thread)

 c_proc(xsfThread_wait,{thread})
	
end procedure

public procedure sfThread_terminate(atom thread)

 c_proc(xsfThread_terminate,{thread})
	
end procedure
­164.37